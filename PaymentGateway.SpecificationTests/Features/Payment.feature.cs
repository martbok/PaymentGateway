// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PaymentGateway.SpecificationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Process and retrieve payment")]
    public partial class ProcessAndRetrievePaymentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Payment.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Process and retrieve payment", "\tAs a merchant\r\n\tI want to process a payment\r\n\tSo that I can sell a product.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully process a payment")]
        public virtual void SuccessfullyProcessAPayment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully process a payment", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "PaymentId",
                            "AAAAAAAABBBBCCCCDDDDEEEEEEEEEEEE"});
                table1.AddRow(new string[] {
                            "IsSuccessful",
                            "true"});
#line 7
 testRunner.Given("the Acquiring Bank is set to respond", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "CardNumber",
                            "4658582263620043"});
                table2.AddRow(new string[] {
                            "ExpiryDate",
                            "0824"});
                table2.AddRow(new string[] {
                            "Amount",
                            "10"});
                table2.AddRow(new string[] {
                            "Ccv",
                            "001"});
                table2.AddRow(new string[] {
                            "CurrencyCode",
                            "GBP"});
#line 11
 testRunner.When("the call to Payment Gateway Api with a new payment is made", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "CardNumber",
                            "4658582263620043"});
                table3.AddRow(new string[] {
                            "ExpiryDate",
                            "0824"});
                table3.AddRow(new string[] {
                            "Amount",
                            "10"});
                table3.AddRow(new string[] {
                            "CurrencyCode",
                            "GBP"});
                table3.AddRow(new string[] {
                            "Ccv",
                            "001"});
                table3.AddRow(new string[] {
                            "PaymentId",
                            "AAAAAAAABBBBCCCCDDDDEEEEEEEEEEEE"});
                table3.AddRow(new string[] {
                            "IsSuccessful",
                            "true"});
#line 18
 testRunner.Then("the processed payment is stored", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "PaymentId",
                            "AAAAAAAABBBBCCCCDDDDEEEEEEEEEEEE"});
                table4.AddRow(new string[] {
                            "IsSuccessful",
                            "true"});
#line 27
 testRunner.And("the successful payment response is received", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve the details of a previously made payment")]
        public virtual void RetrieveTheDetailsOfAPreviouslyMadePayment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve the details of a previously made payment", null, ((string[])(null)));
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "CardNumber",
                            "4658582263620043"});
                table5.AddRow(new string[] {
                            "ExpiryDate",
                            "0824"});
                table5.AddRow(new string[] {
                            "Amount",
                            "10"});
                table5.AddRow(new string[] {
                            "CurrencyCode",
                            "GBP"});
                table5.AddRow(new string[] {
                            "Ccv",
                            "001"});
                table5.AddRow(new string[] {
                            "PaymentId",
                            "AAAAAAAABBBBCCCCDDDDEEEEEEEEEEEE"});
                table5.AddRow(new string[] {
                            "IsSuccessful",
                            "true"});
#line 33
 testRunner.Given("the previous payment is stored", ((string)(null)), table5, "Given ");
#line hidden
#line 42
 testRunner.When("the call to Payment Gateway Api with PaymentId \'AAAAAAAABBBBCCCCDDDDEEEEEEEEEEEE\'" +
                        " is made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "CardNumber",
                            "465858******0043"});
                table6.AddRow(new string[] {
                            "ExpiryDate",
                            "0824"});
                table6.AddRow(new string[] {
                            "Amount",
                            "10"});
                table6.AddRow(new string[] {
                            "CurrencyCode",
                            "GBP"});
                table6.AddRow(new string[] {
                            "Ccv",
                            "001"});
                table6.AddRow(new string[] {
                            "PaymentId",
                            "AAAAAAAABBBBCCCCDDDDEEEEEEEEEEEE"});
                table6.AddRow(new string[] {
                            "IsSuccessful",
                            "true"});
#line 43
 testRunner.Then("the payment details are received", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive an error response when retrieving a payment that does not exist")]
        public virtual void ReceiveAnErrorResponseWhenRetrievingAPaymentThatDoesNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive an error response when retrieving a payment that does not exist", null, ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given("the payment does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.When("the call to Payment Gateway Api with PaymentId \'AAAAAAAABBBBCCCCDDDDEEEEEEEEEEEE\'" +
                        " is made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then("not the found result is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
